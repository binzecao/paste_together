pipeline {
    agent any
    environment {
        CODE_DIR="code-jenkins-${JOB_NAME}-${BUILD_NUMBER}"
        JENKINS_VOLUME_DIR="/data/jenkins_home/workspace/paste_together/${CODE_DIR}" // jenkins docker 挂载的路径
        GIT_PROJECT_URL="ssh://git@192.168.50.60:22666/root/paste_together.git"
        BUILD_IMAGE="golang:1.14.5-alpine"
        OUTPUT_IMAGE="paste_together:${BUILD_NUMBER}"
        IMAGE_NAME="paste_together_${BUILD_NUMBER}"
    }
    stages {
        stage('下载代码') {
            steps {
                sh "rm -rf ${CODE_DIR}"
                sh "mkdir ${CODE_DIR}"
                dir("${CODE_DIR}") {
                    git branch: 'master', credentialsId: 'jenkins_gitlab_ssh_key', url: GIT_PROJECT_URL
                }
            }
        }
        stage('编译程序') {
            steps {
                dir("${CODE_DIR}") {
                    // 因为 Jenkins 是在容器里跑的，但 docker run 是在宿主机执行的，所以这里挂载的要写宿主机真实存在的路径
                    sh "docker run --rm -v ${JENKINS_VOLUME_DIR}:/project -w /project/deploy/build ${BUILD_IMAGE} sh ./build.sh"
                }
            }
        }
        stage('打包镜像') {
            steps {
                dir("${CODE_DIR}") {
                    sh "docker build -t ${OUTPUT_IMAGE} -f deploy/docker/Dockerfile ."
                }
            }
        }
        stage('运行镜像') {
            steps {
                echo "停止、删除之前的容器"
                sh '''
                    oldContainerIds=`docker ps -a --format '{{.ID}} {{.Image}}' | grep paste_together: | grep -v paste_together:${BUILD_NUMBER} | awk '{print \$1}'`
                    if [ ! -z \$oldContainerIds ]; then docker stop \$oldContainerIds | xargs docker rm; fi
                '''

                echo "删除之前生成的镜像"
                sh '''
                    oldImages=`docker images --filter 'reference=paste_together' | grep paste_together | awk '{print \$1, \":\", \$2}' | sed -r 's/ //g' | grep -v :${BUILD_NUMBER}\$`
                    if [ ! -z \$oldImages ]; then docker rmi \$oldImages; fi
                '''

                echo "运行最新的镜像"
                sh "docker run --name=${IMAGE_NAME} --restart=always -v /data/paste_together:/project/data -p 46699:46699 -d ${OUTPUT_IMAGE}"
            }
        }
    }
}
